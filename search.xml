<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx小记</title>
      <link href="/2019/10/16/nginx-xiao-ji/"/>
      <url>/2019/10/16/nginx-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#定义Nginx运行的用户和用户组</span><span class="token attr-name">user</span> <span class="token attr-value">www www; </span><span class="token comment" spellcheck="true">#nginx进程数，通常设置成和cpu的数量相等</span><span class="token attr-name">worker_processes</span> <span class="token attr-value">4; </span><span class="token comment" spellcheck="true">#全局错误日志定义类型，[debug | info | notice | warn | error | crit]</span><span class="token comment" spellcheck="true">#error_log  logs/error.log;</span><span class="token comment" spellcheck="true">#error_log  logs/error.log  notice;</span><span class="token comment" spellcheck="true">#error_log  logs/error.log  info;</span><span class="token comment" spellcheck="true">#进程pid文件</span><span class="token comment" spellcheck="true">#pid        logs/nginx.pid;</span><span class="token comment" spellcheck="true">#指定进程可以打开的最大描述符：数目</span><span class="token comment" spellcheck="true">#工作模式与连接数上限</span><span class="token comment" spellcheck="true">##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><span class="token comment" spellcheck="true">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><span class="token attr-name">worker_rlimit_nofile</span> <span class="token attr-value">65535;</span><span class="token attr-name">events</span> <span class="token attr-value">{</span><span class="token comment" spellcheck="true">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><span class="token comment" spellcheck="true">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><span class="token comment" spellcheck="true">    #补充说明：</span><span class="token comment" spellcheck="true">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><span class="token comment" spellcheck="true">    #A）标准事件模型</span><span class="token comment" spellcheck="true">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><span class="token comment" spellcheck="true">    #B）高效事件模型</span><span class="token comment" spellcheck="true">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><span class="token comment" spellcheck="true">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><span class="token comment" spellcheck="true">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><span class="token comment" spellcheck="true">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><span class="token attr-name">    use</span> <span class="token attr-value">epoll</span><span class="token comment" spellcheck="true">    #单个进程最大连接数（最大连接数=连接数+进程数）</span><span class="token comment" spellcheck="true">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。</span><span class="token attr-name">    worker_connections</span> <span class="token attr-value"> 1024;</span><span class="token comment" spellcheck="true">    #keepalive 超时时间</span><span class="token attr-name">    keepalive_timeout</span> <span class="token attr-value">60;</span><span class="token comment" spellcheck="true">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><span class="token comment" spellcheck="true">    #分页大小可以用命令getconf PAGESIZE 取得。</span><span class="token comment" spellcheck="true">    #[root@web001 ~]# getconf PAGESIZE</span><span class="token comment" spellcheck="true">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><span class="token attr-name">    client_header_buffer_size</span> <span class="token attr-value">4k;</span><span class="token comment" spellcheck="true">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><span class="token attr-name">    open_file_cache</span> <span class="token attr-value">max=65535 inactive=60s;</span><span class="token comment" spellcheck="true">    #这个是指多长时间检查一次缓存的有效信息。</span><span class="token comment" spellcheck="true">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><span class="token attr-name">    open_file_cache_valid</span> <span class="token attr-value">80s;</span><span class="token comment" spellcheck="true">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><span class="token comment" spellcheck="true">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><span class="token attr-name">    open_file_cache_min_uses</span> <span class="token attr-value">1;</span><span class="token comment" spellcheck="true">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><span class="token attr-name">    open_file_cache_errors</span> <span class="token attr-value">on;</span>}<span class="token comment" spellcheck="true">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span>http{<span class="token comment" spellcheck="true">    #文件扩展名与文件类型映射表</span><span class="token attr-name">    include</span> <span class="token attr-value">mime.types;</span><span class="token comment" spellcheck="true">    #默认文件类型</span><span class="token attr-name">    default_type</span> <span class="token attr-value">application/octet-stream;</span><span class="token comment" spellcheck="true">    #默认编码</span><span class="token attr-name">    charset</span> <span class="token attr-value">utf-8;</span><span class="token comment" spellcheck="true">    #服务器名字的hash表大小</span><span class="token comment" spellcheck="true">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><span class="token attr-name">    server_names_hash_bucket_size</span> <span class="token attr-value">128;</span><span class="token comment" spellcheck="true">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><span class="token attr-name">    client_header_buffer_size</span> <span class="token attr-value">32k;</span><span class="token comment" spellcheck="true">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><span class="token attr-name">    large_client_header_buffers</span> <span class="token attr-value">4 64k;</span><span class="token comment" spellcheck="true">    #设定通过nginx上传文件的大小</span><span class="token attr-name">    client_max_body_size</span> <span class="token attr-value">8m;</span><span class="token comment" spellcheck="true">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><span class="token comment" spellcheck="true">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><span class="token attr-name">    sendfile</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">     #开启目录列表访问，合适下载服务器，默认关闭。</span><span class="token attr-name">    autoindex</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">      #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><span class="token attr-name">    tcp_nopush</span> <span class="token attr-value">on;</span><span class="token attr-name">    tcp_nodelay</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">    #长连接超时时间，单位是秒</span><span class="token attr-name">    keepalive_timeout</span> <span class="token attr-value">120;</span><span class="token comment" spellcheck="true">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><span class="token attr-name">    fastcgi_connect_timeout</span> <span class="token attr-value">300;</span><span class="token attr-name">    fastcgi_send_timeout</span> <span class="token attr-value">300;</span><span class="token attr-name">    fastcgi_read_timeout</span> <span class="token attr-value">300;</span><span class="token attr-name">    fastcgi_buffer_size</span> <span class="token attr-value">64k;</span><span class="token attr-name">    fastcgi_buffers</span> <span class="token attr-value">4 64k;</span><span class="token attr-name">    fastcgi_busy_buffers_size</span> <span class="token attr-value">128k;</span><span class="token attr-name">    fastcgi_temp_file_write_size</span> <span class="token attr-value">128k;</span><span class="token comment" spellcheck="true">    #gzip模块设置</span><span class="token attr-name">    gzip</span> <span class="token attr-value">on; #开启gzip压缩输出</span><span class="token attr-name">    gzip_min_length</span> <span class="token attr-value">1k;    #最小压缩文件大小</span><span class="token attr-name">    gzip_buffers</span> <span class="token attr-value">4 16k;    #压缩缓冲区</span><span class="token attr-name">    gzip_http_version</span> <span class="token attr-value">1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><span class="token attr-name">    gzip_comp_level</span> <span class="token attr-value">2;     #压缩等级</span><span class="token attr-name">    gzip_types</span> <span class="token attr-value">text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><span class="token attr-name">    gzip_vary</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">    #开启限制IP连接数的时候需要使用</span><span class="token comment" spellcheck="true">    #limit_zone crawler $binary_remote_addr 10m;</span><span class="token comment" spellcheck="true">    #负载均衡配置</span><span class="token attr-name">    upstream</span> <span class="token attr-value">piao.jd.com {</span><span class="token comment" spellcheck="true">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.80.121:80 weight=3;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.80.122:80 weight=2;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.80.123:80 weight=3;</span><span class="token comment" spellcheck="true">        #nginx的upstream目前支持4种方式的分配</span><span class="token comment" spellcheck="true">        #1、轮询（默认）</span><span class="token comment" spellcheck="true">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><span class="token comment" spellcheck="true">        #2、weight</span><span class="token comment" spellcheck="true">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><span class="token comment" spellcheck="true">        #例如：</span><span class="token comment" spellcheck="true">        #upstream bakend {</span><span class="token comment" spellcheck="true">        #    server 192.168.0.14 weight=10;</span><span class="token comment" spellcheck="true">        #    server 192.168.0.15 weight=10;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #2、ip_hash</span><span class="token comment" spellcheck="true">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><span class="token comment" spellcheck="true">        #例如：</span><span class="token comment" spellcheck="true">        #upstream bakend {</span><span class="token comment" spellcheck="true">        #    ip_hash;</span><span class="token comment" spellcheck="true">        #    server 192.168.0.14:88;</span><span class="token comment" spellcheck="true">        #    server 192.168.0.15:80;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #3、fair（第三方）</span><span class="token comment" spellcheck="true">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><span class="token comment" spellcheck="true">        #upstream backend {</span><span class="token comment" spellcheck="true">        #    server server1;</span><span class="token comment" spellcheck="true">        #    server server2;</span><span class="token comment" spellcheck="true">        #    fair;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #4、url_hash（第三方）</span><span class="token comment" spellcheck="true">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><span class="token comment" spellcheck="true">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><span class="token comment" spellcheck="true">        #upstream backend {</span><span class="token comment" spellcheck="true">        #    server squid1:3128;</span><span class="token comment" spellcheck="true">        #    server squid2:3128;</span><span class="token comment" spellcheck="true">        #    hash $request_uri;</span><span class="token comment" spellcheck="true">        #    hash_method crc32;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #tips:</span><span class="token comment" spellcheck="true">        #upstream bakend</span><span class="token comment" spellcheck="true">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><span class="token comment" spellcheck="true">        #每个设备的状态设置为:</span><span class="token comment" spellcheck="true">        #1.down表示单前的server暂时不参与负载</span><span class="token comment" spellcheck="true">        #2.weight为weight越大，负载的权重就越大。</span><span class="token comment" spellcheck="true">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><span class="token comment" spellcheck="true">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><span class="token comment" spellcheck="true">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><span class="token comment" spellcheck="true">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><span class="token comment" spellcheck="true">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><span class="token comment" spellcheck="true">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><span class="token comment" spellcheck="true">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span>    }<span class="token comment" spellcheck="true">    #虚拟主机的配置</span><span class="token attr-name">    server</span> <span class="token attr-value">{</span><span class="token comment" spellcheck="true">        #监听端口</span><span class="token attr-name">        listen</span> <span class="token attr-value">80;</span><span class="token comment" spellcheck="true">        #域名可以有多个，用空格隔开</span><span class="token attr-name">        server_name</span> <span class="token attr-value">www.jd.com jd.com;</span><span class="token comment" spellcheck="true">        #默认入口文件名称</span><span class="token attr-name">        index</span> <span class="token attr-value">index.html index.htm index.php;</span><span class="token attr-name">        root</span> <span class="token attr-value">/data/www/jd;</span><span class="token comment" spellcheck="true">        #对******进行负载均衡</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .*.(php|php5)?$</span>        {<span class="token attr-name">            fastcgi_pass</span> <span class="token attr-value">127.0.0.1:9000;</span><span class="token attr-name">            fastcgi_index</span> <span class="token attr-value">index.php;</span><span class="token attr-name">            include</span> <span class="token attr-value">fastcgi.conf;</span>        }<span class="token comment" spellcheck="true">        #图片缓存时间设置</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span>        {<span class="token attr-name">            expires</span> <span class="token attr-value">10d;</span>        }<span class="token comment" spellcheck="true">        #JS和CSS缓存时间设置</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .*.(js|css)?$</span>        {<span class="token attr-name">            expires</span> <span class="token attr-value">1h;</span>        }<span class="token comment" spellcheck="true">        #日志格式设定</span><span class="token comment" spellcheck="true">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><span class="token comment" spellcheck="true">        #$remote_user：用来记录客户端用户名称；</span><span class="token comment" spellcheck="true">        #$time_local： 用来记录访问时间与时区；</span><span class="token comment" spellcheck="true">        #$request： 用来记录请求的url与http协议；</span><span class="token comment" spellcheck="true">        #$status： 用来记录请求状态；成功是200，</span><span class="token comment" spellcheck="true">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><span class="token comment" spellcheck="true">        #$http_referer：用来记录从那个页面链接访问过来的；</span><span class="token comment" spellcheck="true">        #$http_user_agent：记录客户浏览器的相关信息；</span><span class="token comment" spellcheck="true">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><span class="token attr-name">        log_format</span> <span class="token attr-value">access '$remote_addr - $remote_user [$time_local] "$request" '</span><span class="token attr-name">        '$status</span> <span class="token attr-value">$body_bytes_sent "$http_referer" '</span><span class="token attr-name">        '"$http_user_agent"</span> <span class="token attr-value">$http_x_forwarded_for';</span><span class="token comment" spellcheck="true">        #定义本虚拟主机的访问日志</span><span class="token attr-name">        access_log</span> <span class="token attr-value"> /usr/local/nginx/logs/host.access.log  main;</span><span class="token attr-name">        access_log</span> <span class="token attr-value"> /usr/local/nginx/logs/host.access.404.log  log404;</span><span class="token comment" spellcheck="true">        #对 "/connect-controller" 启用反向代理</span><span class="token attr-name">        location</span> <span class="token attr-value">/connect-controller {</span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">http://127.0.0.1:88; #请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）</span><span class="token attr-name">            proxy_redirect</span> <span class="token attr-value">off;</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Real-IP $remote_addr;</span><span class="token comment" spellcheck="true">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token comment" spellcheck="true">            #以下是一些反向代理的配置，可选。</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">Host $host;</span><span class="token comment" spellcheck="true">            #允许客户端请求的最大单文件字节数</span><span class="token attr-name">            client_max_body_size</span> <span class="token attr-value">10m;</span><span class="token comment" spellcheck="true">            #缓冲区代理缓冲用户端请求的最大字节数，</span><span class="token comment" spellcheck="true">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><span class="token comment" spellcheck="true">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><span class="token attr-name">            client_body_buffer_size</span> <span class="token attr-value">128k;</span><span class="token comment" spellcheck="true">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><span class="token attr-name">            proxy_intercept_errors</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><span class="token comment" spellcheck="true">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><span class="token attr-name">            proxy_connect_timeout</span> <span class="token attr-value">90;</span><span class="token comment" spellcheck="true">            #后端服务器数据回传时间(代理发送超时)</span><span class="token comment" spellcheck="true">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><span class="token attr-name">            proxy_send_timeout</span> <span class="token attr-value">90;</span><span class="token comment" spellcheck="true">            #连接成功后，后端服务器响应时间(代理接收超时)</span><span class="token comment" spellcheck="true">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><span class="token attr-name">            proxy_read_timeout</span> <span class="token attr-value">90;</span><span class="token comment" spellcheck="true">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><span class="token comment" spellcheck="true">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><span class="token attr-name">            proxy_buffer_size</span> <span class="token attr-value">4k;</span><span class="token comment" spellcheck="true">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><span class="token comment" spellcheck="true">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><span class="token attr-name">            proxy_buffers</span> <span class="token attr-value">4 32k;</span><span class="token comment" spellcheck="true">            #高负荷下缓冲大小（proxy_buffers*2）</span><span class="token attr-name">            proxy_busy_buffers_size</span> <span class="token attr-value">64k;</span><span class="token comment" spellcheck="true">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><span class="token comment" spellcheck="true">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><span class="token attr-name">            proxy_temp_file_write_size</span> <span class="token attr-value">64k;</span>        }<span class="token comment" spellcheck="true">        #本地动静分离反向代理配置</span><span class="token comment" spellcheck="true">        #所有jsp的页面均交由tomcat或resin处理</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .(jsp|jspx|do)?$ {</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">Host $host;</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Real-IP $remote_addr;</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">http://127.0.0.1:8080;</span>        }    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins小记</title>
      <link href="/2019/09/11/jenkins-xiao-ji/"/>
      <url>/2019/09/11/jenkins-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="jenkins概念"><a href="#jenkins概念" class="headerlink" title="jenkins概念"></a>jenkins概念</h2><h3 id="持续集成、持续部署、持续交付"><a href="#持续集成、持续部署、持续交付" class="headerlink" title="持续集成、持续部署、持续交付"></a>持续集成、持续部署、持续交付</h3><p>更有利于迭代开发</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>降低风险</li><li>减少很多重复性工作</li></ul><h2 id="jenkins-svn"><a href="#jenkins-svn" class="headerlink" title="jenkins+svn"></a>jenkins+svn</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> jenkisn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本命令</title>
      <link href="/2019/09/06/git-ji-ben-ming-ling/"/>
      <url>/2019/09/06/git-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化本地仓库</p><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置git全局信息<br><code>$ git config --global user.name 'name'</code><br><code>$ git config --global user.email 'email'</code></p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p><code>$ git add &lt;filename&gt;</code><br>添加指定文件：<br><code>$ git add .</code><br>添加目录下所有文件</p><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p><code>$ git rm --cached &lt;filename&gt;</code><br>删除添加的指定文件</p><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看添加的文件队列</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>默认会弹出编辑日志框<br><code>$ git commit -m 'log'</code><br>直接指定日志内容提交</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p><code>$ git remote add &lt;SSH URO or HTTP URL&gt;</code><br><code>$ git remote add origin remoteUrl</code><br>添加远程仓库<br><code>$ git remote -v</code><br>查看绑定的远程仓库<br><code>$ git remote remove &lt;remoteName&gt;</code><br><code>$ git remote remove origin</code></p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p><code>$ git push -u origin master</code><br>推送项目到远程仓库</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>从远程仓库拉取项目（同步）<br><code>$ git pull origin master --allow-unrelated-histories</code><br>将本地仓库和远程仓库进行关联</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>从远程仓库拉取项目（从无到有）</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p><code>$ git branch test</code><br>创建分支：test</p><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p><code>$ git checkout test</code><br>切换到test分支</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p><code>$ git merge test</code><br>合并test分支内容到主干</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本命令</title>
      <link href="/2019/09/03/hexo-ji-ben-ming-ling/"/>
      <url>/2019/09/03/hexo-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p><code>$ hexo init [folder]</code></p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p><code>$ hexo new [layout] &lt;title&gt;</code></p><ul><li>layout: 对应网站目录/scaffolds/下面的md文件对应的类型(md文件名)，该目录下存放的是模板文件</li></ul><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left">draft</td><td align="left">source/_draft</td></tr><tr><td align="left">page</td><td align="left">source</td></tr><tr><td align="left">post</td><td align="left">source/_posts</td></tr></tbody></table><ul><li>hexo创建文件会根据这些模板文件进行文件生成</li></ul><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><p><code>$ hexo publish [layout] &lt;title&gt;</code><br>发布草稿</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p><code>$ hexo generate</code><br>可以简写为:<br><code>$ hexo g</code><br>生成静态文件</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p><code>$ hexo server --debug --config local.yml</code></p><ul><li>-p,–post 重设端口</li><li>–debug   调试模式</li><li>–config  指定自定义配置文件启动</li></ul><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><p><code>$ hexo deploy</code></p><ul><li>-g, –generate 部署前先生成静态文件</li></ul><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><p><code>$ hexo clean</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2019/08/31/markdown-yu-fa/"/>
      <url>/2019/08/31/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token title important"><span class="token punctuation">##</span> 二级标题</span></code></pre><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><pre class=" language-markdown"><code class="language-markdown">代码<span class="token title important"><span class="token punctuation">###</span> 三级标题</span></code></pre><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>first</li><li>second</li><li>third</li></ol><pre class=" language-markdown"><code class="language-markdown">代码<span class="token list punctuation">1.</span> first<span class="token list punctuation">2.</span> second<span class="token list punctuation">3.</span> third</code></pre><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>first</li><li>second</li><li>third</li></ul><pre class=" language-markdown"><code class="language-markdown">代码<span class="token list punctuation">-</span> first<span class="token list punctuation">-</span> second<span class="token list punctuation">-</span> third</code></pre><h2 id="链接写法"><a href="#链接写法" class="headerlink" title="链接写法"></a>链接写法</h2><p><a href="https://qqallnice.github.io/blog" target="_blank" rel="noopener">yw’s blog</a></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token url">[yw's blog](https://qqallnice.github.io/blog)</span></code></pre><h2 id="链接写法-带标题"><a href="#链接写法-带标题" class="headerlink" title="链接写法(带标题)"></a>链接写法(带标题)</h2><p><a href="https://qqallnice.github.io/blog" title="yw’s blog" target="_blank" rel="noopener">yw’s blog</a></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token url">[yw's blog](https://qqallnice.github.io/blog <span class="token string">"yw’s blog"</span>)</span></code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt=""></p><pre class=" language-markdown"><code class="language-markdown">代码![](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg)</code></pre><h2 id="图片带title"><a href="#图片带title" class="headerlink" title="图片带title"></a>图片带title</h2><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token url">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg <span class="token string">"区块链"</span>)</span></code></pre><h2 id="句子引用"><a href="#句子引用" class="headerlink" title="句子引用"></a>句子引用</h2><blockquote><p>balabalabalabalabalabalabalabala</p></blockquote><pre class=" language-markdown"><code class="language-markdown">代码<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala</code></pre><h2 id="段落引用"><a href="#段落引用" class="headerlink" title="段落引用"></a>段落引用</h2><blockquote><p>balabalabalabalabalabalabalabala<br>balabalabalabalabalabalabalabala<br>balabalabalabalabalabalabalabala<br>balabalabalabalabalabalabalabala</p></blockquote><pre class=" language-markdown"><code class="language-markdown">代码<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala</code></pre><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a><strong>粗体</strong></h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token bold"><span class="token punctuation">**</span>粗体<span class="token punctuation">**</span></span>或者<span class="token bold"><span class="token punctuation">__</span>粗体<span class="token punctuation">__</span></span></code></pre><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a><em>斜体</em></h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token italic"><span class="token punctuation">*</span>斜体<span class="token punctuation">*</span></span>或者<span class="token italic"><span class="token punctuation">_</span>斜体<span class="token punctuation">_</span></span></code></pre><h2 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体+斜体"></a><strong><em>粗体+斜体</em></strong></h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token bold"><span class="token punctuation">**</span>*粗体+斜体<span class="token punctuation">**</span></span>*</code></pre><h2 id="废弃的文字"><a href="#废弃的文字" class="headerlink" title="废弃的文字"></a><del>废弃的文字</del></h2><pre class=" language-markdown"><code class="language-markdown">代码~~废弃的文字~~</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>姓名</th><th>年龄</th><th align="center">三围</th></tr></thead><tbody><tr><td>张三</td><td>20</td><td align="center">12，21，21</td></tr><tr><td>张三</td><td>20</td><td align="center">12，21，21</td></tr><tr><td>张三</td><td>20</td><td align="center">12，21，21</td></tr></tbody></table><pre class=" language-markdown"><code class="language-markdown">代码| 姓名 | 年龄 | 三围 || --   |--- | :----: ||张三 | 20 |12，21，21||张三 | 20 |12，21，21||张三 | 20 |12，21，21|</code></pre><h2 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h2><p><code>hello world</code></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token code keyword">`hello world`</span></code></pre><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown">代码```javaclass A{<span class="token code keyword">    public static void main(){</span><span class="token code keyword">        System.out.println("helloworld");</span><span class="token code keyword">    }</span>}```</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><pre class=" language-markdown"><code class="language-markdown">代码<span class="token hr punctuation">***</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
