<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一建建筑</title>
      <link href="/2019/11/26/xue-xi-pian/yi-jian-jian-zhu/"/>
      <url>/2019/11/26/xue-xi-pian/yi-jian-jian-zhu/</url>
      
        <content type="html"><![CDATA[<h2 id="2年周期过以下科目"><a href="#2年周期过以下科目" class="headerlink" title="2年周期过以下科目"></a>2年周期过以下科目</h2><p><img src="/imgs/%E4%B8%80%E5%BB%BA%E8%80%83%E9%A2%98%E5%88%86%E6%9E%90%E8%A1%A8.png" alt=""></p><h2 id="经济-100分"><a href="#经济-100分" class="headerlink" title="经济 100分 ****"></a>经济 100分 ****</h2><ol><li>60及格<h2 id="法规-130分"><a href="#法规-130分" class="headerlink" title="法规 130分 ***"></a>法规 130分 ***</h2></li><li>78及格<h2 id="项目管理-130分"><a href="#项目管理-130分" class="headerlink" title="项目管理 130分 ***"></a>项目管理 130分 ***</h2></li><li>78及格</li><li>知识点</li></ol><ul><li>建设工程项目管理：业主方项目管理（核心），施工方项目管理等</li><li>建设工程管理：决策期、实施期、使用期，是对建设工程的专业性管理，同时是一种增值服务</li><li>施工方项目管理在服务业主或建筑方之上，再考虑自身利益</li><li>业主方式整个项目的核心，关心的是整个项目的总投资额，各个参建方都是为其服务的</li><li>业主方在项目管理过程中最重要的任务是安全问题<h2 id="实物-160分"><a href="#实物-160分" class="headerlink" title="实物 160分 *****"></a>实物 160分 *****</h2></li></ul><ol><li>96及格</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 考证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式理论</title>
      <link href="/2019/11/22/xue-xi-pian/fen-bu-shi-li-lun/"/>
      <url>/2019/11/22/xue-xi-pian/fen-bu-shi-li-lun/</url>
      
        <content type="html"><![CDATA[<h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><ul><li>C:Consistent，一致性</li><li>A:Available，可用性</li><li>P:Partition tolerance，分区容错性<br>理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</li></ul><h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><ul><li>BA:Basically Available，基本可用</li><li>S:Soft State，软状态</li><li>E:Eventually Consistent，最终一致性</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2019/11/21/xue-xi-pian/she-ji-mo-shi/"/>
      <url>/2019/11/21/xue-xi-pian/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="java特性"><a href="#java特性" class="headerlink" title="java特性"></a>java特性</h2><ol><li>封装</li><li>抽象</li><li>继承</li><li>多态<h2 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h2></li><li>单一职责</li></ol><ul><li>一个对象的改变只由一个原因倒置</li><li>不同逻辑的接口分割成单一逻辑接口</li><li>大到接口、中到实现类、小到方法尽量遵守</li></ul><ol start="2"><li>里氏替换</li></ol><ul><li>子类可以拓展父类的功能，但是不能变更</li><li>子类相比父类方法需要多（入参类型更广）入（方法入参）少（出参类型更窄）出（方法出参）的 </li></ul><ol start="3"><li>依赖倒置</li></ol><ul><li>高层组件：调用端（客户端）</li><li>底层组件：具体实现类</li><li>不能让高层组件依赖低层组件，两者都应依赖于抽象</li></ul><ol start="4"><li>接口隔离</li></ol><ul><li>依赖于单一职责原则，接口原子化</li><li>单一逻辑接口由于权限不同需要继续细化</li></ul><ol start="5"><li>迪米特</li></ol><ul><li>最小知识原则，尽量减少使用public接口</li><li>只与朋友交流</li></ul><ol start="6"><li>开闭</li></ol><ul><li>对修改关闭，对拓展开放<h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式-Singleton"></a>单例模式-Singleton</h2></li></ul><ol><li>饿汉式，静态成员变量实例化，构造方法私有化，jvm保证只有一个实例</li><li>懒汉式，判断实例是否为null，如果是则new，存在多线程并发访问问题</li><li>懒汉式+方法级别锁，解决2的问题，效率变慢</li><li>懒汉式+代码块锁，双重null校验，解决2的问题，效率较3快一点</li><li>静态内部类进行单例对象实例化，通过对外接口进行实例返回，达到懒汉效果，同时jvm保证只有一个实例</li><li>枚举实现单例，防止反序列化</li></ol><h2 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式-Strategy"></a>策略模式-Strategy</h2><ol><li>定义了算法框架，让他们分开独立实现</li><li>多用组合，少用继承思想</li><li>除了继承之外更加灵活的实现方式</li><li>针对超类/接口编程</li><li>利用java多态特性<br>demo：鸭子对象具备的不同行为，不同鸭子在相同行为下不同的表现，这些都可以用到策略模式，鸭子作为类别，行为可以看做算法，算法可以独立变化形成框架，类别基本不会变化太大，具备对象基本特征。</li></ol><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ol><li>简单工厂</li></ol><ul><li>是实现创建对象的一种封装，不属于设计模式，属于一种实现技巧或方法</li><li>客户端与工厂关系1:1</li></ul><ol start="2"><li>工厂方法-Factory Method</li></ol><ul><li>使用继承，通过父类工厂的创建对象方法，在父类中增加创建的抽象方法来实现</li><li>将对象的创建委托给子类工厂，子类工厂实现超类工厂方法来创建对象</li><li>用于创建单个产品</li><li>客户端与工厂的关系变成n:1</li></ul><ol start="3"><li>抽象工厂-Abstract Factory</li></ol><ul><li>使用对象组合</li><li>对象的创建被实现在工厂接口暴露出来的方法中</li><li>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类</li><li>抽象工厂中包含工厂方法的实现</li><li>简单理解为对工厂方法的再次封装，创建组合产品</li></ul><ol start="4"><li>利用java依赖倒置原则</li></ol><h2 id="门面模式-Facade"><a href="#门面模式-Facade" class="headerlink" title="门面模式-Facade"></a>门面模式-Facade</h2><ol><li>简化接口</li><li>给子系统增加外观，简化对子系统的直接操作</li><li>MVC中的V就属于门面模式</li></ol><h2 id="调停者模式-Mediator"><a href="#调停者模式-Mediator" class="headerlink" title="调停者模式-Mediator"></a>调停者模式-Mediator</h2><ol><li>语法同门面模式</li><li>语义上是简化内部接口之间的调用或操作，通过调停者对象进行间接访问</li></ol><h2 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式-Chain of Responsibility"></a>责任链模式-Chain of Responsibility</h2><ol><li>sevlet中的Filter链就是运用的该模式</li></ol><ul><li>原理：request经过Filter1-&gt;Filter2-&gt;Filter3-&gt;reponse-&gt;Filter3-&gt;Filter2-&gt;Filter1</li><li>doFilter方法入参有(req,resp,filterChain)，出参是Boolean来控制是否需要走下一个链</li></ul><ol start="2"><li>基于策略模式，不同之处在于将策略模式中变化的部分进行整合到List管理</li></ol><h2 id="装饰者模式-Decorator"><a href="#装饰者模式-Decorator" class="headerlink" title="装饰者模式-Decorator"></a>装饰者模式-Decorator</h2><ol><li>动态将功能附加到对象上，比继承更具有弹性的替换方案</li><li>装饰者和组件（被装饰者）基于同一个抽象，保证他们具有相同的类型</li><li>组件+装饰者=带有装饰者功能的组件</li><li>装饰另一个对象，并提供相应的行为</li></ol><h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式-Observer"></a>观察者模式-Observer</h2><ol><li>事件驱动也使用该模式</li></ol><ul><li>事件源，事件本身（会持有事件源依赖），事件消费者（hook、listener、callback、observer）</li></ul><ol start="2"><li>定义了对象1:n的关系</li><li>被观察者（主题）由于某种状态的变化会主动通知信息给所有观察者</li></ol><ul><li>内容的传递有PULL拉和PUSH推2种，一般采用推</li><li>java有自带的该模式实现，但是Observable是一个类，拓展性较差</li></ul><ol start="4"><li>语法通责任链模式</li></ol><h2 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式-Composite"></a>组合模式-Composite</h2><ol><li>允许你将对象组合成树形结构来表现“整体/部分”层次结构，组合能让客户以一致的方式处理个别对象以及对象组合</li><li>牺牲一点单一职责原则换来组合节点和叶子节点的操作透明，对于客户而言，操作叶子节点和操作组合节点是一样的，但是有安全性问题：叶子节点执行添加元素操作，需要额外的增加instanceof来进行操作节点属性判断（叶子节点或组合节点）</li><li>透明性和安全性这种考虑</li></ol><ul><li>透明性：同等对待叶子节点和组合节点</li><li>安全性：避免叶子节点调用组合节点的功能出现问题</li></ul><h2 id="享元模式-Flyweight"><a href="#享元模式-Flyweight" class="headerlink" title="享元模式-Flyweight"></a>享元模式-Flyweight</h2><ol><li>各种池的设计都是利用该模式</li><li>可以结合组合模式</li><li>java中String就是利用该模式（常量池）</li></ol><h2 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式-Proxy"></a>代理模式-Proxy</h2><ol><li>包装另一个对象，并控制对它的访问</li><li>为另一个对象提供一个替身或者占位符以控制对这个对象的访问</li><li>被代理对象可以是远程对象、创建开销大的对象、需要安全控制的对象</li></ol><ul><li>远程代理：创建一个远程服务的代表，对这个代表的访问就相当于对远程服务的访问，代表实现了和远程服务的链接交互等问题</li><li>虚拟代理：对于创建开销特别大的真实对象，虚拟代表会在真实对象创建过程中协助处理，等创建完成后将请求转发到真实对象</li><li>保护代理（动态代理）：基于接口的动态代理，在运行时，可根据需要动态生成代理类，System.getProperties().put(“jdk.proxy.ProxyGenerator.SaveGenerateFiles”,”true”)</li><li>java自带的动态代理基于接口，cglib三方包支持类，都是基于ASM底层实现</li><li>Spring AOP</li></ul><h2 id="迭代器模式-Iterator"><a href="#迭代器模式-Iterator" class="headerlink" title="迭代器模式-Iterator"></a>迭代器模式-Iterator</h2><ol><li>容器的遍历迭代</li><li>数据存储物理结构</li></ol><ul><li>数组</li><li>链表</li></ul><ol start="3"><li>图标，栈，二叉树，队列等等都是逻辑结构，底层实现都是上述2种物理结构</li><li>将不同逻辑结构的数据容器封装一个相同的抽象方法iterator，各自去实现该方法</li></ol><h2 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式-Visitor"></a>访问者模式-Visitor</h2><ol><li>在不改变对象内部结构的情况下，动态改变内部元素的动作</li><li>编译器原理用到该模式</li><li>asm将类字节码（结构稳定），通过该模式可以增加不同的访问对象来动态改变内部元素的动作</li></ol><h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式-Builder"></a>建造者模式-Builder</h2><ol><li>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li><li>model多参数构建，可以通过set器指定初始化部分元素，也可以用该模式抽象封装出一个建造者实现来完成</li></ol><h2 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式-Adapter"></a>适配器模式-Adapter</h2><ol><li>接口功能转换</li><li>转接头</li><li>对象适配：通过对象组合实现</li><li>类适配：通过类继承实现</li></ol><h2 id="桥接模式-Bridge"><a href="#桥接模式-Bridge" class="headerlink" title="桥接模式-Bridge"></a>桥接模式-Bridge</h2><ol><li>双维度拓展，具体和抽象支持同时拓展</li><li>抽象维度中持有具体对象的引用</li><li>装饰模式的升级，支持装饰模式中被装饰者的自我拓展</li></ol><h2 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式-Command"></a>命令模式-Command</h2><ol><li>调用者依赖命令对象，命令执行依赖接受者，最终接受者执行操作</li><li>应用场景：日程安排（Scheduler）、线程池、工作队列</li><li>通过对命令的有序执行，可以进行有序回退</li><li>将动作对象化，可以进行更好的存储、传递和调用</li><li>可以通过多个命令组合生成宏命令进行使用</li><li>聪明命令对象：直接实现了请求，而没有将请求委托给接收者</li></ol><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式-Prototype"></a>原型模式-Prototype</h2><ol><li>用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象</li></ol><h2 id="模板方法模式-Template-Method"><a href="#模板方法模式-Template-Method" class="headerlink" title="模板方法模式-Template Method"></a>模板方法模式-Template Method</h2><ol><li>对一类算法进行封装，将算法和各个算法实现的解耦</li><li>对一类算法进行封装，将模板方法中算法的实现可以延时到子类完成，同时子类可以在不改变算法框架的前提，改变算法内容算法和各个算法实现的解耦</li><li>模板：即方法，此方法定义了一套算法的步骤，一般为了防止算法框架被变更，可以通过final定义，不让子类继承修改</li><li>钩子的应用：可以在模板方法中加入钩子方法的调用，默认给钩子方法一个空的实现，让子类可以选择性的去实现，或者通过钩子方法返回标识来控制模板方法中哪些算法步骤需要加入算法框架</li><li>场景：数组的sort排序，比较的算法是通过排序对应的对象继承Comparable接口实现的，模板方法提供算法框架；io流的read同理</li><li>好莱坞原则：不要给我打电话，我会打电话给你，高层决定如何以及何时调用底层组件</li><li>工厂方法是模板方法的一个特殊场景</li></ol><h2 id="备忘录模式-Memento"><a href="#备忘录模式-Memento" class="headerlink" title="备忘录模式-Memento"></a>备忘录模式-Memento</h2><ol><li>记录对象的状态</li><li>存盘功能，需要将对象以及对象的引用全部序列化Serializabe，或者通过transient将对象中的引用透明化（不序列化标志）</li></ol><h2 id="状态模式-State"><a href="#状态模式-State" class="headerlink" title="状态模式-State"></a>状态模式-State</h2><ol><li>与策略模式属于“双胞胎”</li><li>允许对象在内部状态改变的时候改变他的行为，对象看起来好像修改了它的类</li><li>任何通过状态获取对应行为在设计之初都是定义好了的，不需要调用者进行状态行为的决策<br><img src="/imgs/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt=""></li></ol><h2 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式-Interpreter"></a>解释器模式-Interpreter</h2><ol><li>给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>io模型</title>
      <link href="/2019/11/20/xue-xi-pian/io-mo-xing/"/>
      <url>/2019/11/20/xue-xi-pian/io-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="同步-异步-阻塞-非阻塞"><a href="#同步-异步-阻塞-非阻塞" class="headerlink" title="同步 异步 阻塞 非阻塞"></a>同步 异步 阻塞 非阻塞</h2><ul><li>同步异步是消息通讯机制</li><li>阻塞非阻塞关注的是等待消息的状态<br>demo：<br>张三完成烧水：张三发起烧水动作，水壶放在炉子上</li><li>同步：水烧好后继续由张三操作</li><li>阻塞：张三发起烧水动作到水烧好的这个等待状态是不做任何事</li><li>异步：张三事先设置水烧好就出发机关自动关闭炉子获取其他事项，不再由张三继续操作</li><li>非阻塞：张三发起烧水动作到水烧好的这个等待状态去看了电视</li></ul><h2 id="五大io模型"><a href="#五大io模型" class="headerlink" title="五大io模型"></a>五大io模型</h2><h3 id="IO数据准备和数据从内核拷贝到应用进程是2个独立的过程"><a href="#IO数据准备和数据从内核拷贝到应用进程是2个独立的过程" class="headerlink" title="IO数据准备和数据从内核拷贝到应用进程是2个独立的过程"></a>IO数据准备和数据从内核拷贝到应用进程是2个独立的过程</h3><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h3><p><img src="/imgs/%E9%98%BB%E5%A1%9Eio.jpeg" alt=""></p><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h3><p><img src="/imgs/%E9%9D%9E%E9%98%BB%E5%A1%9Eio.jpeg" alt=""></p><h3 id="复用IO"><a href="#复用IO" class="headerlink" title="复用IO"></a>复用IO</h3><p><img src="/imgs/%E5%A4%8D%E7%94%A8io.jpeg" alt=""></p><h3 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h3><p><img src="/imgs/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8io.jpeg" alt=""></p><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p><img src="/imgs/%E5%BC%82%E6%AD%A5io.jpeg" alt=""></p><h3 id="模型对比"><a href="#模型对比" class="headerlink" title="模型对比"></a>模型对比</h3><p><img src="/imgs/io%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94.png" alt=""></p><h2 id="BIO-NIO-AIO-Netty"><a href="#BIO-NIO-AIO-Netty" class="headerlink" title="BIO NIO AIO Netty"></a>BIO NIO AIO Netty</h2><h3 id="BIO-Blocking-IO"><a href="#BIO-Blocking-IO" class="headerlink" title="BIO(Blocking IO)"></a>BIO(Blocking IO)</h3><ul><li>服务等待连接阻塞</li><li>服务与客户端信息read，write阻塞</li><li>一个连接就需要开一个线程处理连接服务之后的与客户端信息read，write任务</li><li>数据read是一个字节一个字节进行<h3 id="NIO（New-IO）"><a href="#NIO（New-IO）" class="headerlink" title="NIO（New IO）"></a>NIO（New IO）</h3></li></ul><ol><li>单线程模型（Single Thread）</li></ol><ul><li>主线程有一个selector（选择器）</li><li>selector负责轮询查看是否有新客户端要连接到服务，同时查看客户-服务建立的通道是否数据传输已经准备好</li><li>selector会在服务端接受的所有请求放置key（一个请求对应一个key，监听）进行轮询，如果轮询发现有多个key（多个请求），则进行遍历处理</li><li>接着就是对这些key对应的连接请求放置另一个状态的监听（read，write），再次轮询，如果有则进行read，write，原理同上</li><li>selector监听了连接以及数据读写全部的任务</li><li>数据read是和buffer（api极其难用，flip复位问题难以排查）绑定，批量进行</li></ul><ol start="2"><li>多线程模型（reactor），响应编程</li></ol><ul><li>selector只负责轮询是否有连接，同时管理一个worker(线程池)去处理read，write</li><li>当服务端接受的信息worker忙不过来了，可以考虑kafka消息队列存储，然后依次处理</li><li>channel：通道，是一个信息交互的媒介，逻辑概念；队列：是一个存储信息的概念<h3 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h3></li><li>不需要轮询</li><li>由系统监听是否有连接，然后主动告知selector去管理</li><li>windows有对AIO的底层实现，linux中AIO和NIO的底层实现都是通过epoll，AIO多封装了一层<h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3></li><li>服务端<br><img src="/imgs/nettyserver.png" alt=""></li><li>客户端<br><img src="/imgs/nettyclient.png" alt=""></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm调优</title>
      <link href="/2019/11/20/xue-xi-pian/jvm-diao-you/"/>
      <url>/2019/11/20/xue-xi-pian/jvm-diao-you/</url>
      
        <content type="html"><![CDATA[<h2 id="jdk、jre和jvm"><a href="#jdk、jre和jvm" class="headerlink" title="jdk、jre和jvm"></a>jdk、jre和jvm</h2><p><img src="/imgs/jdk.png" alt=""></p><h2 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h2><ul><li>classic VM：第一款商用</li><li>hotspot VM：热门VM</li></ul><h2 id="Run-time-data-area"><a href="#Run-time-data-area" class="headerlink" title="Run-time data area"></a>Run-time data area</h2><ul><li>PC：程序计数器，记录程序运行的指令地址，目的是线程切换后再次回来能知道线程运行到哪里，线程独享</li><li>Native Method Stacks：本地方法栈，线程独享</li><li>VM Stacks：vm虚拟机栈，存放栈针(一个方法一个栈针)，线程独享</li><li>Heap：堆，线程共享</li><li>Method Area：（Perm/Meta Space）方法区，线程共享</li><li>Const Pool：常量池，属于方法栈，线程共享</li></ul><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><p><img src="/imgs/heap.png" alt=""></p><h3 id="Garbage-Collector"><a href="#Garbage-Collector" class="headerlink" title="Garbage Collector"></a>Garbage Collector</h3><ul><li>如何判断需要回收：没有任何引用的对象</li><li>垃圾判断算法</li></ul><ol><li>引用计数：算法简单，但是容易出现循环依赖导致都无法回收</li><li>根搜索，正向可达：通过程序运行时产生的根对象，依次正向寻找这些对象需要的依赖，能找到的都不回收</li></ol><ul><li>根对象：JVM stack，native method stack，run-time constant pool, static references in method area, Clazz</li><li>垃圾清理算法</li></ul><ol><li>Mark-Sweep：标记清除，容易产生碎片，导致没有连续的物理空间存放较大对象，影响性能，需要定时碎片整理</li><li>Copying：拷贝，效率很高，将内存一分为二，和新生代的surviv0+surviv1的机制一样，先将其中一个区域不需要回收的对象拷贝到另外一个区，同时还可以在另外一个区压缩解决碎片化问题，然后将之前的区域整个清理，针对垃圾比较多的情况，如新生代的s0+s1</li><li>Mark-Compact：标记压缩，在清理的时候同时进行未回收对象的压缩，让未回收的对象尽量在连续的物理空间，减少碎片化，效率会稍低，针对垃圾不多的情况</li></ol><ul><li>垃圾回收器的选择指标</li></ul><ol><li>吞吐量</li><li>并发效率高</li><li>STW（stop the world）少</li></ol><ul><li>垃圾回收器类别</li></ul><ol><li>Serial</li><li>Parallel</li><li>Concurrent Mark Sweep</li><li>G1</li></ol><h2 id="tuning入门-java对象分配"><a href="#tuning入门-java对象分配" class="headerlink" title="tuning入门-java对象分配"></a>tuning入门-java对象分配</h2><ul><li>栈上分配：出战之后对象自动清理，无需走GC</li></ul><ol><li>线程私有小对象</li><li>无逃逸</li><li>支持标量替换</li><li>无需调整</li></ol><ul><li>线程本地分配TLAB（Thread Local Allocation Buffer）</li></ul><ol><li>占用Eden区内存，默认1%</li><li>多线程时不用竞争eden就可以申请空间，提高效率</li><li>小对象</li><li>无需调整</li></ol><ul><li>老年代</li></ul><ol><li>大对象</li></ol><ul><li>Eden</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yws micro service platform</title>
      <link href="/2019/11/11/xue-xi-pian/yws-micro-service-platform/"/>
      <url>/2019/11/11/xue-xi-pian/yws-micro-service-platform/</url>
      
        <content type="html"><![CDATA[<h2 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h2><p>groovy实现的java构建工具<br>无法实现maven的多级子项目创建</p><p>## </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> micro service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security OAuth2</title>
      <link href="/2019/11/07/xue-xi-pian/spring-security-oauth2/"/>
      <url>/2019/11/07/xue-xi-pian/spring-security-oauth2/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Security-OAuth2"><a href="#Spring-Security-OAuth2" class="headerlink" title="Spring Security OAuth2"></a>Spring Security OAuth2</h2><hr><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h3><hr><h3 id="1-1-认证"><a href="#1-1-认证" class="headerlink" title="1.1 认证"></a>1.1 认证</h3><p>身份认证</p><h3 id="1-2-授权"><a href="#1-2-授权" class="headerlink" title="1.2 授权"></a>1.2 授权</h3><p>认证后资源访问权限</p><h3 id="1-3-授权数据模型"><a href="#1-3-授权数据模型" class="headerlink" title="1.3 授权数据模型"></a>1.3 授权数据模型</h3><p>WWH：Who对What(Which)进行How操作<br>Who：主体（Subject)，如：用户、程序<br>What：资源（Resource)<br>How：权限/许可（Permission）</p><h3 id="1-4-RBAC（Role-Resource-Based-Access-Control）"><a href="#1-4-RBAC（Role-Resource-Based-Access-Control）" class="headerlink" title="1.4 RBAC（Role/Resource-Based Access Control）"></a>1.4 RBAC（Role/Resource-Based Access Control）</h3><ul><li>基于角色的访问控制</li><li>基于资源的访问控制<h3 id="2-Spring-Security"><a href="#2-Spring-Security" class="headerlink" title="2 Spring Security"></a>2 Spring Security</h3></li></ul><hr><h3 id="2-1-工作原理"><a href="#2-1-工作原理" class="headerlink" title="2.1 工作原理"></a>2.1 工作原理</h3><pre><code>由filter链来进行处理，每个请求进来都会走一个filter链核心的几个链：认证的filter+授权filter</code></pre><h3 id="2-2-认证流程"><a href="#2-2-认证流程" class="headerlink" title="2.2 认证流程"></a>2.2 认证流程</h3><h3 id="2-2-1-AuthenticationProvider"><a href="#2-2-1-AuthenticationProvider" class="headerlink" title="2.2.1 AuthenticationProvider"></a>2.2.1 AuthenticationProvider</h3><h3 id="2-2-2-UserDetailService"><a href="#2-2-2-UserDetailService" class="headerlink" title="2.2.2 UserDetailService"></a>2.2.2 UserDetailService</h3><h3 id="2-2-3-PasswordEncoder"><a href="#2-2-3-PasswordEncoder" class="headerlink" title="2.2.3 PasswordEncoder"></a>2.2.3 PasswordEncoder</h3><h3 id="3-分布式系统认证方案"><a href="#3-分布式系统认证方案" class="headerlink" title="3 分布式系统认证方案"></a>3 分布式系统认证方案</h3><hr><h3 id="3-1-分布式系统"><a href="#3-1-分布式系统" class="headerlink" title="3.1 分布式系统"></a>3.1 分布式系统</h3><ul><li>分布性：每个部分可以独立部署，模块之间通过网络进行通信</li><li>伸缩性：每个部分可以集群方式部署，可以针对部分节点进行硬件或软件扩容</li><li>共享性：每个部分可以作为共享资源对外提供服务，多个部分可能操作共享资源</li><li>开放性：每个部分可以对外发布共享资源访问接口，允许第三方系统接入<h3 id="3-2-分布式认证需求"><a href="#3-2-分布式认证需求" class="headerlink" title="3.2 分布式认证需求"></a>3.2 分布式认证需求</h3></li><li>统一认证授权</li><li>应用接入授权<h3 id="3-3-分布式认证方案"><a href="#3-3-分布式认证方案" class="headerlink" title="3.3 分布式认证方案"></a>3.3 分布式认证方案</h3></li><li>基于session的认证</li><li>基于token的认证（以此方案为准）<h3 id="4-OAuth2-0"><a href="#4-OAuth2-0" class="headerlink" title="4 OAuth2.0"></a>4 OAuth2.0</h3></li></ul><hr><h3 id="4-1-OAuth2-0介绍"><a href="#4-1-OAuth2-0介绍" class="headerlink" title="4.1 OAuth2.0介绍"></a>4.1 OAuth2.0介绍</h3><p>它是一个开放标准，允许用户授权第三方应用访问他们存储在另外服务提供者上的用户本人相关信息，而不需要将用户和密码提供给第三方应用或分享用户数据的所有内容。<br>例如：用户A通过授权新浪博客访问用户A在微信服务上的身份信息，这样用户A就可以通过微信登录成功验证后直接无账号访问新浪博客<br>流程：用户A访问新浪微博登录页==》新浪微博登录页请求微信认证==》微信返回用户A是否授权页面==》用户A确认==》新浪微博获取到微信返回的授权码==》新浪微博通过授权码向微信申请令牌==》微信成功返回令牌==》新浪微博向微信请求用户信息==》微信校验令牌合法性返回用户信息==》新浪微博显示用户信息然后正常访问新浪相关服务<br>OAuth2.0包含的角色</p><ul><li>客户端：浏览器等</li><li>资源拥有者：用户A</li><li>授权服务器：微信认证服务器，会同时校验<strong>客户端</strong>和<strong>资源拥有者</strong>是否都合法</li><li>资源服务器：微信存储的用户信息<h3 id="4-2-Spring-Cloud-Security-OAuth2-0"><a href="#4-2-Spring-Cloud-Security-OAuth2-0" class="headerlink" title="4.2 Spring Cloud Security OAuth2.0"></a>4.2 Spring Cloud Security OAuth2.0</h3></li><li>授权服务（Authorization Server）<br>AuthorizationEndPoint服务于认证请求。默认URL：/oauth/authorize<br>TokenEndPoint服务于访问令牌请求。默认URL：/oauth/token</li><li>资源服务（Resource Server）</li><li>OAuth2AuthenticationProcessingFilter用来对请求的令牌进行解析校验<h3 id="4-3-授权服务配置"><a href="#4-3-授权服务配置" class="headerlink" title="4.3 授权服务配置"></a>4.3 授权服务配置</h3>令牌存储方式</li><li>InMemoryTokenStore</li><li>JdbcTokenStore</li><li>JwtTokenStore：Json WebToken</li><li>总结：要完成认证，需要知道客户端详情配置==》token的相关端点及如何存储，客户端支持哪些类型token==》对暴露在外的端点进行安全策略配置<br>四种模式</li><li>授权码模式<br>/uaa/oauth/authorize?client_id=c1&amp;response_type=code&amp;scope=all&amp;redirect_uri=<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br>/uaa/oauth/token?client_id=c1&amp;client_secret=secret&amp;grant_type=authorization_code&amp;code=<em>&amp;^</em>^yyi*&amp;redirect_uri=<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></li><li>简化模式<br>/uaa/oauth/authorize?client_id=c1&amp;response_type=token&amp;scope=all&amp;redirect_uri=<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></li><li>密码模式<br>/uaa/oauth/token?client_id=c1&amp;client_secret=secret&amp;grant_type=password&amp;username=zhangsan&amp;password=123&amp;redirect_uri=<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></li><li>客户端模式<br>/uaa/oauth/token?client_id=c1&amp;client_secret=secret&amp;grant_type=client_credentials&amp;redirect_uri=<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><h3 id="4-4-资源服务配置"><a href="#4-4-资源服务配置" class="headerlink" title="4.4 资源服务配置"></a>4.4 资源服务配置</h3>资源访问校验会与认证服务交互获取，所以需要在资源服务配置中增加认证服务uri设置</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ocp系统</title>
      <link href="/2019/11/07/xue-xi-pian/ocp-xi-tong/"/>
      <url>/2019/11/07/xue-xi-pian/ocp-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><p>简化实体类的编码，编译后自动生成set、get器等重复性代码，开发时可忽略</p><h2 id="Oahth"><a href="#Oahth" class="headerlink" title="Oahth"></a>Oahth</h2><p>开放身份认证授权标准<br>spring security安全验证框架，对oauth标准的实现</p><h2 id="kaptcha"><a href="#kaptcha" class="headerlink" title="kaptcha"></a>kaptcha</h2><p>google图形验证码 </p><h2 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a>springcloud</h2><p>将xml配置进行java对象化</p><h2 id="验证码功能"><a href="#验证码功能" class="headerlink" title="验证码功能"></a>验证码功能</h2><ul><li>页面通过url请求服务器生成验证码，同时通过redis进行持久化<h2 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h2>restful API接口框架</li><li>自动生成接口文档</li><li>接口测试<h2 id="xxl-job"><a href="#xxl-job" class="headerlink" title="xxl-job"></a>xxl-job</h2></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> micro service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh原理</title>
      <link href="/2019/11/07/zhuan-ye-pian/ssh-yuan-li/"/>
      <url>/2019/11/07/zhuan-ye-pian/ssh-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建免密访问"><a href="#搭建免密访问" class="headerlink" title="搭建免密访问"></a>搭建免密访问</h2><h3 id="通过rsa非对称算法生成相关信息"><a href="#通过rsa非对称算法生成相关信息" class="headerlink" title="通过rsa非对称算法生成相关信息"></a>通过rsa非对称算法生成相关信息</h3><ul><li>ssh-keygen -t rsa -P ‘’</li><li>会自动在~目录下生成.ssh文件夹，包含下列文件信息</li><li>authorized_keys</li><li>存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥</li><li>id_rsa</li><li>生成的私钥文件</li><li>id_rsa.pub</li><li>生成的公钥文件</li><li>know_hosts</li><li>已知的主机公钥清单<h3 id="如果希望ssh公钥生效需满足至少下面两个条件："><a href="#如果希望ssh公钥生效需满足至少下面两个条件：" class="headerlink" title="如果希望ssh公钥生效需满足至少下面两个条件："></a>如果希望ssh公钥生效需满足至少下面两个条件：</h3></li><li>.ssh目录的权限必须是700</li><li>.ssh/authorized_keys文件权限必须是600<h3 id="实现双向免登陆"><a href="#实现双向免登陆" class="headerlink" title="实现双向免登陆"></a>实现双向免登陆</h3></li><li>A免登陆B</li><li>将A机器上生成的pub文件拷贝到B服务器</li><li>然后将pub文件转成authorized_keys认证文件</li><li>将pub文件信息追加到authorized_keys中</li><li>cat pub &gt;&gt; authorized_keys</li><li>B免登录A</li><li>将B机器上生成的pub文件拷贝到A服务器</li><li>然后将pub文件转成authorized_keys认证文件</li><li>know_hosts</li><li>如果B事先增加了A的pub公钥信息，则A机器首次免密码登录B时不会有提示是否连接</li><li>反之亦反</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链概念</title>
      <link href="/2019/11/07/xue-xi-pian/qu-kuai-lian-gai-nian/"/>
      <url>/2019/11/07/xue-xi-pian/qu-kuai-lian-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><h3 id="是一种数字或者叫电子货币"><a href="#是一种数字或者叫电子货币" class="headerlink" title="是一种数字或者叫电子货币"></a>是一种数字或者叫电子货币</h3><h3 id="去中心化的点对点（P2P）电子记账系统"><a href="#去中心化的点对点（P2P）电子记账系统" class="headerlink" title="去中心化的点对点（P2P）电子记账系统"></a>去中心化的点对点（P2P）电子记账系统</h3><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><h3 id="由比特币衍生出来的一个概念"><a href="#由比特币衍生出来的一个概念" class="headerlink" title="由比特币衍生出来的一个概念"></a>由比特币衍生出来的一个概念</h3><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>ABCD相互交易</li><li>A给B10个比特币，该交易记录A会广播出去让BCD都知道</li><li>同理BCD的交易记录也会广播到所有用户</li><li>这些交易记录会打包成一个块（<strong>区块</strong>）</li><li>每个区块大小1M，可以存储4000多条交易记录</li><li>每个新块会链接到之前的老块上就形成了<strong>区块链</strong></li></ul><h2 id="挖矿原理"><a href="#挖矿原理" class="headerlink" title="挖矿原理"></a>挖矿原理</h2><ul><li>哈希算法（sha256）</li><li>通过对一个字符串进行2次哈希运算</li><li>字符串：前区块的头部+交易信息+其他信息+时间戳+随机数</li><li>挖矿规则：通过改变随机数让最后计算出的hash值前n为都为0则表示挖矿成功</li><li>难度系数：n个位数</li></ul><h2 id="区块链需要考虑的问题"><a href="#区块链需要考虑的问题" class="headerlink" title="区块链需要考虑的问题"></a>区块链需要考虑的问题</h2><ul><li>区块以谁为准</li><li>为什么要记账</li><li>如何防伪和防篡改</li></ul><h3 id="为什么记账"><a href="#为什么记账" class="headerlink" title="为什么记账"></a>为什么记账</h3><ul><li>会有额外奖励，每次交易会额外增加手续费，同时打包区块也有奖励</li></ul><h3 id="比特币总数"><a href="#比特币总数" class="headerlink" title="比特币总数"></a>比特币总数</h3><ul><li>每4年打包奖励减半，从50个比特币开始依次类推</li><li>每10分钟允许打包一次</li><li>50<em>6</em>24<em>365</em>4*（1+1/2+1/4+…）= 2100w左右</li></ul><h3 id="以谁为准"><a href="#以谁为准" class="headerlink" title="以谁为准"></a>以谁为准</h3><ul><li>工作量证明，解决一个数学题，谁先解决就以谁为准进行打包</li></ul><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><ul><li>ras非对称算法安全性保证</li><li>每个用户都可以通过申请得到一个私钥，每次交易记录进行广播都会进行加密</li><li>发送方：交易记录+摘要（通过对交易记录进行hash运算）+密文（通过对摘要进行私钥加密）</li><li>广播内容：交易记录+公钥+密文</li><li>接收方：对交易记录进行hash运算得到摘要+通过公钥和密文进行解密得到摘要，比对2个摘要是否相等</li></ul><h3 id="余额检查"><a href="#余额检查" class="headerlink" title="余额检查"></a>余额检查</h3><ul><li>通过追溯的方式进行区块主链上交易记录进行用户比特币余额计算</li></ul><h3 id="双重支付"><a href="#双重支付" class="headerlink" title="双重支付"></a>双重支付</h3><ul><li>余额为10比特币，同时发送交易记录给A，B</li><li>其他所有用户可能有部分接受到的交易记录是给A，有点给B</li><li>等到某个用户挖到矿打包区块的时候会根据该用户接受到的交易记录为准，另一条作废</li><li>比特币的交易需要过几个区块才能确定是否成功</li></ul><h3 id="防止篡改"><a href="#防止篡改" class="headerlink" title="防止篡改"></a>防止篡改</h3><ul><li>区块链需要满足最长链路原则</li><li>如果已经有3个区块，某用户想修改第二个区块内的交易信息</li><li>必须在第二个区块进行重新打包，同时要打包出第三个区块、第四个区块…</li><li>还需要该进度快于已经存在的3个区块打包进度</li><li>难度：以个人之力对抗所有用户挖矿能力</li><li>其他所有用户都在主链上挖矿，个人需要开辟新分支进行单独挖矿</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wms系统搭建</title>
      <link href="/2019/11/05/gong-zuo-pian/wms-xi-tong-da-jian/"/>
      <url>/2019/11/05/gong-zuo-pian/wms-xi-tong-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="中间件等三方app服务器"><a href="#中间件等三方app服务器" class="headerlink" title="中间件等三方app服务器"></a>中间件等三方app服务器</h3><h3 id="wms服务器"><a href="#wms服务器" class="headerlink" title="wms服务器"></a>wms服务器</h3><h2 id="中间件等三方服务"><a href="#中间件等三方服务" class="headerlink" title="中间件等三方服务"></a>中间件等三方服务</h2><h3 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h3><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h3 id="xxljob"><a href="#xxljob" class="headerlink" title="xxljob"></a>xxljob</h3><h3 id="apollo"><a href="#apollo" class="headerlink" title="apollo"></a>apollo</h3><h3 id="nexus"><a href="#nexus" class="headerlink" title="nexus"></a>nexus</h3><h3 id="svn"><a href="#svn" class="headerlink" title="svn"></a>svn</h3><h2 id="数据库服务"><a href="#数据库服务" class="headerlink" title="数据库服务"></a>数据库服务</h2><h3 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h3><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h2 id="用户权限服务"><a href="#用户权限服务" class="headerlink" title="用户权限服务"></a>用户权限服务</h2><h2 id="wms服务"><a href="#wms服务" class="headerlink" title="wms服务"></a>wms服务</h2><h3 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h3><h3 id="开关服务"><a href="#开关服务" class="headerlink" title="开关服务"></a>开关服务</h3><h3 id="日志服务"><a href="#日志服务" class="headerlink" title="日志服务"></a>日志服务</h3><h3 id="入库服务"><a href="#入库服务" class="headerlink" title="入库服务"></a>入库服务</h3><h3 id="库存服务"><a href="#库存服务" class="headerlink" title="库存服务"></a>库存服务</h3><h3 id="出库服务"><a href="#出库服务" class="headerlink" title="出库服务"></a>出库服务</h3><h3 id="补货服务"><a href="#补货服务" class="headerlink" title="补货服务"></a>补货服务</h3><h3 id="报损服务"><a href="#报损服务" class="headerlink" title="报损服务"></a>报损服务</h3><h3 id="加工服务"><a href="#加工服务" class="headerlink" title="加工服务"></a>加工服务</h3><h3 id="报表服务"><a href="#报表服务" class="headerlink" title="报表服务"></a>报表服务</h3><h2 id="monitor服务"><a href="#monitor服务" class="headerlink" title="monitor服务"></a>monitor服务</h2><h2 id="job服务"><a href="#job服务" class="headerlink" title="job服务"></a>job服务</h2><h3 id="数据同步job"><a href="#数据同步job" class="headerlink" title="数据同步job"></a>数据同步job</h3><h2 id="短信服务"><a href="#短信服务" class="headerlink" title="短信服务"></a>短信服务</h2><h2 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx小记</title>
      <link href="/2019/10/16/zhuan-ye-pian/nginx-xiao-ji/"/>
      <url>/2019/10/16/zhuan-ye-pian/nginx-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#定义Nginx运行的用户和用户组</span><span class="token attr-name">user</span> <span class="token attr-value">www www; </span><span class="token comment" spellcheck="true">#nginx进程数，通常设置成和cpu的数量相等</span><span class="token attr-name">worker_processes</span> <span class="token attr-value">4; </span><span class="token comment" spellcheck="true">#全局错误日志定义类型，[debug | info | notice | warn | error | crit]</span><span class="token comment" spellcheck="true">#error_log  logs/error.log;</span><span class="token comment" spellcheck="true">#error_log  logs/error.log  notice;</span><span class="token comment" spellcheck="true">#error_log  logs/error.log  info;</span><span class="token comment" spellcheck="true">#进程pid文件</span><span class="token comment" spellcheck="true">#pid        logs/nginx.pid;</span><span class="token comment" spellcheck="true">#指定进程可以打开的最大描述符：数目</span><span class="token comment" spellcheck="true">#工作模式与连接数上限</span><span class="token comment" spellcheck="true">##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><span class="token comment" spellcheck="true">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><span class="token attr-name">worker_rlimit_nofile</span> <span class="token attr-value">65535;</span><span class="token attr-name">events</span> <span class="token attr-value">{</span><span class="token comment" spellcheck="true">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><span class="token comment" spellcheck="true">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><span class="token comment" spellcheck="true">    #补充说明：</span><span class="token comment" spellcheck="true">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><span class="token comment" spellcheck="true">    #A）标准事件模型</span><span class="token comment" spellcheck="true">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><span class="token comment" spellcheck="true">    #B）高效事件模型</span><span class="token comment" spellcheck="true">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><span class="token comment" spellcheck="true">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><span class="token comment" spellcheck="true">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><span class="token comment" spellcheck="true">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><span class="token attr-name">    use</span> <span class="token attr-value">epoll</span><span class="token comment" spellcheck="true">    #单个进程最大连接数（最大连接数=连接数+进程数）</span><span class="token comment" spellcheck="true">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。</span><span class="token attr-name">    worker_connections</span> <span class="token attr-value"> 1024;</span><span class="token comment" spellcheck="true">    #keepalive 超时时间</span><span class="token attr-name">    keepalive_timeout</span> <span class="token attr-value">60;</span><span class="token comment" spellcheck="true">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><span class="token comment" spellcheck="true">    #分页大小可以用命令getconf PAGESIZE 取得。</span><span class="token comment" spellcheck="true">    #[root@web001 ~]# getconf PAGESIZE</span><span class="token comment" spellcheck="true">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><span class="token attr-name">    client_header_buffer_size</span> <span class="token attr-value">4k;</span><span class="token comment" spellcheck="true">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><span class="token attr-name">    open_file_cache</span> <span class="token attr-value">max=65535 inactive=60s;</span><span class="token comment" spellcheck="true">    #这个是指多长时间检查一次缓存的有效信息。</span><span class="token comment" spellcheck="true">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><span class="token attr-name">    open_file_cache_valid</span> <span class="token attr-value">80s;</span><span class="token comment" spellcheck="true">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><span class="token comment" spellcheck="true">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><span class="token attr-name">    open_file_cache_min_uses</span> <span class="token attr-value">1;</span><span class="token comment" spellcheck="true">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><span class="token attr-name">    open_file_cache_errors</span> <span class="token attr-value">on;</span>}<span class="token comment" spellcheck="true">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span>http{<span class="token comment" spellcheck="true">    #文件扩展名与文件类型映射表</span><span class="token attr-name">    include</span> <span class="token attr-value">mime.types;</span><span class="token comment" spellcheck="true">    #默认文件类型</span><span class="token attr-name">    default_type</span> <span class="token attr-value">application/octet-stream;</span><span class="token comment" spellcheck="true">    #默认编码</span><span class="token attr-name">    charset</span> <span class="token attr-value">utf-8;</span><span class="token comment" spellcheck="true">    #服务器名字的hash表大小</span><span class="token comment" spellcheck="true">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><span class="token attr-name">    server_names_hash_bucket_size</span> <span class="token attr-value">128;</span><span class="token comment" spellcheck="true">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><span class="token attr-name">    client_header_buffer_size</span> <span class="token attr-value">32k;</span><span class="token comment" spellcheck="true">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><span class="token attr-name">    large_client_header_buffers</span> <span class="token attr-value">4 64k;</span><span class="token comment" spellcheck="true">    #设定通过nginx上传文件的大小</span><span class="token attr-name">    client_max_body_size</span> <span class="token attr-value">8m;</span><span class="token comment" spellcheck="true">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><span class="token comment" spellcheck="true">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><span class="token attr-name">    sendfile</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">     #开启目录列表访问，合适下载服务器，默认关闭。</span><span class="token attr-name">    autoindex</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">      #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><span class="token attr-name">    tcp_nopush</span> <span class="token attr-value">on;</span><span class="token attr-name">    tcp_nodelay</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">    #长连接超时时间，单位是秒</span><span class="token attr-name">    keepalive_timeout</span> <span class="token attr-value">120;</span><span class="token comment" spellcheck="true">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><span class="token attr-name">    fastcgi_connect_timeout</span> <span class="token attr-value">300;</span><span class="token attr-name">    fastcgi_send_timeout</span> <span class="token attr-value">300;</span><span class="token attr-name">    fastcgi_read_timeout</span> <span class="token attr-value">300;</span><span class="token attr-name">    fastcgi_buffer_size</span> <span class="token attr-value">64k;</span><span class="token attr-name">    fastcgi_buffers</span> <span class="token attr-value">4 64k;</span><span class="token attr-name">    fastcgi_busy_buffers_size</span> <span class="token attr-value">128k;</span><span class="token attr-name">    fastcgi_temp_file_write_size</span> <span class="token attr-value">128k;</span><span class="token comment" spellcheck="true">    #gzip模块设置</span><span class="token attr-name">    gzip</span> <span class="token attr-value">on; #开启gzip压缩输出</span><span class="token attr-name">    gzip_min_length</span> <span class="token attr-value">1k;    #最小压缩文件大小</span><span class="token attr-name">    gzip_buffers</span> <span class="token attr-value">4 16k;    #压缩缓冲区</span><span class="token attr-name">    gzip_http_version</span> <span class="token attr-value">1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><span class="token attr-name">    gzip_comp_level</span> <span class="token attr-value">2;     #压缩等级</span><span class="token attr-name">    gzip_types</span> <span class="token attr-value">text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><span class="token attr-name">    gzip_vary</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">    #开启限制IP连接数的时候需要使用</span><span class="token comment" spellcheck="true">    #limit_zone crawler $binary_remote_addr 10m;</span><span class="token comment" spellcheck="true">    #负载均衡配置</span><span class="token attr-name">    upstream</span> <span class="token attr-value">piao.jd.com {</span><span class="token comment" spellcheck="true">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.80.121:80 weight=3;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.80.122:80 weight=2;</span><span class="token attr-name">        server</span> <span class="token attr-value">192.168.80.123:80 weight=3;</span><span class="token comment" spellcheck="true">        #nginx的upstream目前支持4种方式的分配</span><span class="token comment" spellcheck="true">        #1、轮询（默认）</span><span class="token comment" spellcheck="true">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><span class="token comment" spellcheck="true">        #2、weight</span><span class="token comment" spellcheck="true">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><span class="token comment" spellcheck="true">        #例如：</span><span class="token comment" spellcheck="true">        #upstream bakend {</span><span class="token comment" spellcheck="true">        #    server 192.168.0.14 weight=10;</span><span class="token comment" spellcheck="true">        #    server 192.168.0.15 weight=10;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #2、ip_hash</span><span class="token comment" spellcheck="true">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><span class="token comment" spellcheck="true">        #例如：</span><span class="token comment" spellcheck="true">        #upstream bakend {</span><span class="token comment" spellcheck="true">        #    ip_hash;</span><span class="token comment" spellcheck="true">        #    server 192.168.0.14:88;</span><span class="token comment" spellcheck="true">        #    server 192.168.0.15:80;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #3、fair（第三方）</span><span class="token comment" spellcheck="true">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><span class="token comment" spellcheck="true">        #upstream backend {</span><span class="token comment" spellcheck="true">        #    server server1;</span><span class="token comment" spellcheck="true">        #    server server2;</span><span class="token comment" spellcheck="true">        #    fair;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #4、url_hash（第三方）</span><span class="token comment" spellcheck="true">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><span class="token comment" spellcheck="true">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><span class="token comment" spellcheck="true">        #upstream backend {</span><span class="token comment" spellcheck="true">        #    server squid1:3128;</span><span class="token comment" spellcheck="true">        #    server squid2:3128;</span><span class="token comment" spellcheck="true">        #    hash $request_uri;</span><span class="token comment" spellcheck="true">        #    hash_method crc32;</span><span class="token comment" spellcheck="true">        #}</span><span class="token comment" spellcheck="true">        #tips:</span><span class="token comment" spellcheck="true">        #upstream bakend</span><span class="token comment" spellcheck="true">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><span class="token comment" spellcheck="true">        #每个设备的状态设置为:</span><span class="token comment" spellcheck="true">        #1.down表示单前的server暂时不参与负载</span><span class="token comment" spellcheck="true">        #2.weight为weight越大，负载的权重就越大。</span><span class="token comment" spellcheck="true">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><span class="token comment" spellcheck="true">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><span class="token comment" spellcheck="true">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><span class="token comment" spellcheck="true">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><span class="token comment" spellcheck="true">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><span class="token comment" spellcheck="true">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><span class="token comment" spellcheck="true">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span>    }<span class="token comment" spellcheck="true">    #虚拟主机的配置</span><span class="token attr-name">    server</span> <span class="token attr-value">{</span><span class="token comment" spellcheck="true">        #监听端口</span><span class="token attr-name">        listen</span> <span class="token attr-value">80;</span><span class="token comment" spellcheck="true">        #域名可以有多个，用空格隔开</span><span class="token attr-name">        server_name</span> <span class="token attr-value">www.jd.com jd.com;</span><span class="token comment" spellcheck="true">        #默认入口文件名称</span><span class="token attr-name">        index</span> <span class="token attr-value">index.html index.htm index.php;</span><span class="token attr-name">        root</span> <span class="token attr-value">/data/www/jd;</span><span class="token comment" spellcheck="true">        #对******进行负载均衡</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .*.(php|php5)?$</span>        {<span class="token attr-name">            fastcgi_pass</span> <span class="token attr-value">127.0.0.1:9000;</span><span class="token attr-name">            fastcgi_index</span> <span class="token attr-value">index.php;</span><span class="token attr-name">            include</span> <span class="token attr-value">fastcgi.conf;</span>        }<span class="token comment" spellcheck="true">        #图片缓存时间设置</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span>        {<span class="token attr-name">            expires</span> <span class="token attr-value">10d;</span>        }<span class="token comment" spellcheck="true">        #JS和CSS缓存时间设置</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .*.(js|css)?$</span>        {<span class="token attr-name">            expires</span> <span class="token attr-value">1h;</span>        }<span class="token comment" spellcheck="true">        #日志格式设定</span><span class="token comment" spellcheck="true">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><span class="token comment" spellcheck="true">        #$remote_user：用来记录客户端用户名称；</span><span class="token comment" spellcheck="true">        #$time_local： 用来记录访问时间与时区；</span><span class="token comment" spellcheck="true">        #$request： 用来记录请求的url与http协议；</span><span class="token comment" spellcheck="true">        #$status： 用来记录请求状态；成功是200，</span><span class="token comment" spellcheck="true">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><span class="token comment" spellcheck="true">        #$http_referer：用来记录从那个页面链接访问过来的；</span><span class="token comment" spellcheck="true">        #$http_user_agent：记录客户浏览器的相关信息；</span><span class="token comment" spellcheck="true">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><span class="token attr-name">        log_format</span> <span class="token attr-value">access '$remote_addr - $remote_user [$time_local] "$request" '</span><span class="token attr-name">        '$status</span> <span class="token attr-value">$body_bytes_sent "$http_referer" '</span><span class="token attr-name">        '"$http_user_agent"</span> <span class="token attr-value">$http_x_forwarded_for';</span><span class="token comment" spellcheck="true">        #定义本虚拟主机的访问日志</span><span class="token attr-name">        access_log</span> <span class="token attr-value"> /usr/local/nginx/logs/host.access.log  main;</span><span class="token attr-name">        access_log</span> <span class="token attr-value"> /usr/local/nginx/logs/host.access.404.log  log404;</span><span class="token comment" spellcheck="true">        #对 "/connect-controller" 启用反向代理</span><span class="token attr-name">        location</span> <span class="token attr-value">/connect-controller {</span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">http://127.0.0.1:88; #请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）</span><span class="token attr-name">            proxy_redirect</span> <span class="token attr-value">off;</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Real-IP $remote_addr;</span><span class="token comment" spellcheck="true">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token comment" spellcheck="true">            #以下是一些反向代理的配置，可选。</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">Host $host;</span><span class="token comment" spellcheck="true">            #允许客户端请求的最大单文件字节数</span><span class="token attr-name">            client_max_body_size</span> <span class="token attr-value">10m;</span><span class="token comment" spellcheck="true">            #缓冲区代理缓冲用户端请求的最大字节数，</span><span class="token comment" spellcheck="true">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><span class="token comment" spellcheck="true">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><span class="token attr-name">            client_body_buffer_size</span> <span class="token attr-value">128k;</span><span class="token comment" spellcheck="true">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><span class="token attr-name">            proxy_intercept_errors</span> <span class="token attr-value">on;</span><span class="token comment" spellcheck="true">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><span class="token comment" spellcheck="true">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><span class="token attr-name">            proxy_connect_timeout</span> <span class="token attr-value">90;</span><span class="token comment" spellcheck="true">            #后端服务器数据回传时间(代理发送超时)</span><span class="token comment" spellcheck="true">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><span class="token attr-name">            proxy_send_timeout</span> <span class="token attr-value">90;</span><span class="token comment" spellcheck="true">            #连接成功后，后端服务器响应时间(代理接收超时)</span><span class="token comment" spellcheck="true">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><span class="token attr-name">            proxy_read_timeout</span> <span class="token attr-value">90;</span><span class="token comment" spellcheck="true">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><span class="token comment" spellcheck="true">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><span class="token attr-name">            proxy_buffer_size</span> <span class="token attr-value">4k;</span><span class="token comment" spellcheck="true">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><span class="token comment" spellcheck="true">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><span class="token attr-name">            proxy_buffers</span> <span class="token attr-value">4 32k;</span><span class="token comment" spellcheck="true">            #高负荷下缓冲大小（proxy_buffers*2）</span><span class="token attr-name">            proxy_busy_buffers_size</span> <span class="token attr-value">64k;</span><span class="token comment" spellcheck="true">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><span class="token comment" spellcheck="true">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><span class="token attr-name">            proxy_temp_file_write_size</span> <span class="token attr-value">64k;</span>        }<span class="token comment" spellcheck="true">        #本地动静分离反向代理配置</span><span class="token comment" spellcheck="true">        #所有jsp的页面均交由tomcat或resin处理</span><span class="token attr-name">        location</span> <span class="token attr-value">~ .(jsp|jspx|do)?$ {</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">Host $host;</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Real-IP $remote_addr;</span><span class="token attr-name">            proxy_set_header</span> <span class="token attr-value">X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">http://127.0.0.1:8080;</span>        }    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins小记</title>
      <link href="/2019/09/11/zhuan-ye-pian/jenkins-xiao-ji/"/>
      <url>/2019/09/11/zhuan-ye-pian/jenkins-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="jenkins概念"><a href="#jenkins概念" class="headerlink" title="jenkins概念"></a>jenkins概念</h2><h3 id="持续集成、持续部署、持续交付"><a href="#持续集成、持续部署、持续交付" class="headerlink" title="持续集成、持续部署、持续交付"></a>持续集成、持续部署、持续交付</h3><p>更有利于迭代开发</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>降低风险</li><li>减少很多重复性工作</li></ul><h2 id="jenkins-svn"><a href="#jenkins-svn" class="headerlink" title="jenkins+svn"></a>jenkins+svn</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> jenkisn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本命令</title>
      <link href="/2019/09/06/zhuan-ye-pian/git-ji-ben-ming-ling/"/>
      <url>/2019/09/06/zhuan-ye-pian/git-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化本地仓库</p><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置git全局信息<br><code>$ git config --global user.name 'name'</code><br><code>$ git config --global user.email 'email'</code></p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p><code>$ git add &lt;filename&gt;</code><br>添加指定文件：<br><code>$ git add .</code><br>添加目录下所有文件</p><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p><code>$ git rm --cached &lt;filename&gt;</code><br>删除添加的指定文件</p><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看添加的文件队列</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>默认会弹出编辑日志框<br><code>$ git commit -m 'log'</code><br>直接指定日志内容提交</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p><code>$ git remote add &lt;SSH URO or HTTP URL&gt;</code><br><code>$ git remote add origin remoteUrl</code><br>添加远程仓库<br><code>$ git remote -v</code><br>查看绑定的远程仓库<br><code>$ git remote remove &lt;remoteName&gt;</code><br><code>$ git remote remove origin</code></p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p><code>$ git push -u origin master</code><br>推送项目到远程仓库</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>从远程仓库拉取项目（同步）<br><code>$ git pull origin master --allow-unrelated-histories</code><br>将本地仓库和远程仓库进行关联</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>从远程仓库拉取项目（从无到有）</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p><code>$ git branch test</code><br>创建分支：test</p><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p><code>$ git checkout test</code><br>切换到test分支</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p><code>$ git merge test</code><br>合并test分支内容到主干</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本命令</title>
      <link href="/2019/09/03/zhuan-ye-pian/hexo-ji-ben-ming-ling/"/>
      <url>/2019/09/03/zhuan-ye-pian/hexo-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p><code>$ hexo init [folder]</code></p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p><code>$ hexo new [layout] &lt;title&gt;</code></p><ul><li>layout: 对应网站目录/scaffolds/下面的md文件对应的类型(md文件名)，该目录下存放的是模板文件</li></ul><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left">draft</td><td align="left">source/_draft</td></tr><tr><td align="left">page</td><td align="left">source</td></tr><tr><td align="left">post</td><td align="left">source/_posts</td></tr></tbody></table><ul><li>hexo创建文件会根据这些模板文件进行文件生成</li></ul><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><p><code>$ hexo publish [layout] &lt;title&gt;</code><br>发布草稿</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p><code>$ hexo generate</code><br>可以简写为:<br><code>$ hexo g</code><br>生成静态文件</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p><code>$ hexo server --debug --config local.yml</code></p><ul><li>-p,–post 重设端口</li><li>–debug   调试模式</li><li>–config  指定自定义配置文件启动</li></ul><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><p><code>$ hexo deploy</code></p><ul><li>-g, –generate 部署前先生成静态文件</li></ul><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><p><code>$ hexo clean</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2019/08/31/zhuan-ye-pian/markdown-yu-fa/"/>
      <url>/2019/08/31/zhuan-ye-pian/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token title important"><span class="token punctuation">##</span> 二级标题</span></code></pre><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><pre class=" language-markdown"><code class="language-markdown">代码<span class="token title important"><span class="token punctuation">###</span> 三级标题</span></code></pre><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>first</li><li>second</li><li>third</li></ol><pre class=" language-markdown"><code class="language-markdown">代码<span class="token list punctuation">1.</span> first<span class="token list punctuation">2.</span> second<span class="token list punctuation">3.</span> third</code></pre><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>first</li><li>second</li><li>third</li></ul><pre class=" language-markdown"><code class="language-markdown">代码<span class="token list punctuation">-</span> first<span class="token list punctuation">-</span> second<span class="token list punctuation">-</span> third</code></pre><h2 id="链接写法"><a href="#链接写法" class="headerlink" title="链接写法"></a>链接写法</h2><p><a href="https://qqallnice.github.io/blog" target="_blank" rel="noopener">yw’s blog</a></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token url">[yw's blog](https://qqallnice.github.io/blog)</span></code></pre><h2 id="链接写法-带标题"><a href="#链接写法-带标题" class="headerlink" title="链接写法(带标题)"></a>链接写法(带标题)</h2><p><a href="https://qqallnice.github.io/blog" title="yw’s blog" target="_blank" rel="noopener">yw’s blog</a></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token url">[yw's blog](https://qqallnice.github.io/blog <span class="token string">"yw’s blog"</span>)</span></code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt=""></p><pre class=" language-markdown"><code class="language-markdown">代码![](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg)</code></pre><h2 id="图片带title"><a href="#图片带title" class="headerlink" title="图片带title"></a>图片带title</h2><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token url">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg <span class="token string">"区块链"</span>)</span></code></pre><h2 id="句子引用"><a href="#句子引用" class="headerlink" title="句子引用"></a>句子引用</h2><blockquote><p>balabalabalabalabalabalabalabala</p></blockquote><pre class=" language-markdown"><code class="language-markdown">代码<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala</code></pre><h2 id="段落引用"><a href="#段落引用" class="headerlink" title="段落引用"></a>段落引用</h2><blockquote><p>balabalabalabalabalabalabalabala<br>balabalabalabalabalabalabalabala<br>balabalabalabalabalabalabalabala<br>balabalabalabalabalabalabalabala</p></blockquote><pre class=" language-markdown"><code class="language-markdown">代码<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala<span class="token blockquote punctuation">></span> balabalabalabalabalabalabalabala</code></pre><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a><strong>粗体</strong></h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token bold"><span class="token punctuation">**</span>粗体<span class="token punctuation">**</span></span>或者<span class="token bold"><span class="token punctuation">__</span>粗体<span class="token punctuation">__</span></span></code></pre><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a><em>斜体</em></h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token italic"><span class="token punctuation">*</span>斜体<span class="token punctuation">*</span></span>或者<span class="token italic"><span class="token punctuation">_</span>斜体<span class="token punctuation">_</span></span></code></pre><h2 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体+斜体"></a><strong><em>粗体+斜体</em></strong></h2><pre class=" language-markdown"><code class="language-markdown">代码<span class="token bold"><span class="token punctuation">**</span>*粗体+斜体<span class="token punctuation">**</span></span>*</code></pre><h2 id="废弃的文字"><a href="#废弃的文字" class="headerlink" title="废弃的文字"></a><del>废弃的文字</del></h2><pre class=" language-markdown"><code class="language-markdown">代码~~废弃的文字~~</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>姓名</th><th>年龄</th><th align="center">三围</th></tr></thead><tbody><tr><td>张三</td><td>20</td><td align="center">12，21，21</td></tr><tr><td>张三</td><td>20</td><td align="center">12，21，21</td></tr><tr><td>张三</td><td>20</td><td align="center">12，21，21</td></tr></tbody></table><pre class=" language-markdown"><code class="language-markdown">代码| 姓名 | 年龄 | 三围 || --   |--- | :----: ||张三 | 20 |12，21，21||张三 | 20 |12，21，21||张三 | 20 |12，21，21|</code></pre><h2 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h2><p><code>hello world</code></p><pre class=" language-markdown"><code class="language-markdown">代码<span class="token code keyword">`hello world`</span></code></pre><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown">代码```javaclass A{<span class="token code keyword">    public static void main(){</span><span class="token code keyword">        System.out.println("helloworld");</span><span class="token code keyword">    }</span>}```</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><pre class=" language-markdown"><code class="language-markdown">代码<span class="token hr punctuation">***</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
